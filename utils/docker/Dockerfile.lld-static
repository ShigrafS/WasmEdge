# syntax=docker/dockerfile:1.5-labs

ARG ALPINE_VERSION=3.22

FROM alpine:${ALPINE_VERSION} AS base

# Install build dependencies to build lld statically
RUN apk add --no-cache \
    bash \
    cmake \
    ninja \
    clang \
    llvm-dev \
    llvm-static \
    lld-dev \
    git \
    musl-dev \
    zlib-dev \
    zlib-static \
    libc-dev \
    libffi-dev

WORKDIR /lld-build

# Clone LLVM project (including lld)
RUN git clone --depth=1 https://github.com/llvm/llvm-project.git

WORKDIR /lld-build/llvm-project/build

# Configure LLVM build with lld static libs enabled
RUN cmake -G Ninja ../llvm \
    -DLLVM_ENABLE_PROJECTS="lld" \
    -DCMAKE_BUILD_TYPE=Release \
    -DLLVM_ENABLE_RTTI=ON \
    -DLLVM_ENABLE_EH=ON \
    -DLLVM_ENABLE_LLD=ON \
    -DLLVM_ENABLE_LTO=OFF \
    -DLLVM_TARGETS_TO_BUILD="X86;AArch64;ARM" \
    -DLLVM_BUILD_LLVM_DYLIB=OFF \
    -DLLVM_LINK_LLVM_DYLIB=OFF \
    -DLLVM_INCLUDE_TOOLS=OFF \
    -DLLVM_BUILD_STATIC=ON \
    -DLLVM_BUILD_SHARED_LIBS=OFF \
    -DLLVM_ENABLE_THREADS=OFF \
    -DLLVM_ENABLE_ZLIB=ON \
    -DZLIB_LIBRARY=/lib/libz.a \
    -DZLIB_INCLUDE_DIR=/usr/include

# Build only lld static libs
RUN ninja lld

# Install lld static libs into /lld-install
RUN mkdir -p /lld-install/lib /lld-install/bin
RUN ninja install-lld

# Copy lld static libs and binaries to /lld-install for later reuse
RUN cp /lld-build/llvm-project/build/lib/liblld*.a /lld-install/lib/

WORKDIR /

# Final image with just the static libs and minimal tools
FROM alpine:${ALPINE_VERSION} AS lld-static

COPY --from=base /lld-install /lld-install

# (Optional) Add lld binaries if you want to use lld linker tools
ENV PATH="/lld-install/bin:${PATH}"

CMD ["/bin/sh"]
