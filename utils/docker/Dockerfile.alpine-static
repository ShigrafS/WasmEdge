# syntax=docker/dockerfile:1.5-labs

ARG ALPINE_VERSION=3.22

########################################
# Stage 1: xx (cross-compilation tool)
########################################
ARG XX_VERSION=1.2.1
FROM --platform=$BUILDPLATFORM tonistiigi/xx:${XX_VERSION} AS xx

########################################
# Stage 2: Build LLD from LLVM source
########################################
FROM alpine:${ALPINE_VERSION} AS lld-builder

RUN apk add --no-cache \
    bash \
    cmake \
    ninja \
    clang \
    llvm-dev \
    llvm-static \
    lld-dev \
    git \
    musl-dev \
    zlib-dev \
    zlib-static \
    libc-dev \
    libffi-dev \
    curl \
    tar \
    xz

WORKDIR /lld-build

RUN git clone --depth=1 --branch=release/18.x https://github.com/llvm/llvm-project.git

WORKDIR /lld-build/llvm-project

RUN cmake -B build \
    -G Ninja \
    -DLLVM_ENABLE_PROJECTS="lld" \
    -DLLVM_TARGETS_TO_BUILD="X86;WebAssembly" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/lld-install \
    -DCMAKE_INSTALL_LIBDIR=lib \
    -DLLVM_ENABLE_ASSERTIONS=OFF \
    llvm

RUN cmake --build build --target install

########################################
# Stage 3: Alpine Static Image with LLD
########################################
FROM --platform=$BUILDPLATFORM alpine:${ALPINE_VERSION} AS alpine-static

LABEL maintainer="you@example.com"
LABEL description="Alpine ${ALPINE_VERSION} with LLD and static toolchain"

COPY --from=xx / /

RUN apk add --no-cache bash
SHELL ["bash", "-c"]

RUN apk add --no-cache \
    cmake \
    samurai \
    g++ \
    clang \
    llvm-static \
    lld-dev \
    zlib-static \
    zlib-dev \
    git \
    musl-dev \
    libc-dev \
    libffi-dev

RUN mkdir -p /usr/lib/llvm/lib

COPY --from=lld-builder /lld-install/lib/ /tmp/lld-lib/
RUN find /tmp/lld-lib -name 'liblld*.a' -exec cp {} /usr/lib/llvm/lib/ \; || true

COPY --from=lld-builder /lld-install/bin/ /usr/bin/

RUN sed -i 's|/usr/lib/llvm|${CMAKE_SYSROOT}usr/lib/llvm|' $(xx-info sysroot)usr/lib/cmake/llvm*/LLVMConfig.cmake || true

# Updated xx-toolchain script for newer xx versions
RUN cat <<'EOT' > /usr/bin/xx-toolchain && chmod +x /usr/bin/xx-toolchain
#!/bin/bash
mkdir -p /etc/xx-toolchains/
TOOLCHAIN_FILE="/etc/xx-toolchains/$(xx-info triple).cmake"
if [ ! -f "$TOOLCHAIN_FILE" ]; then
  xx-clang --print-cmake-defines > "$TOOLCHAIN_FILE"
fi
echo "$TOOLCHAIN_FILE"
EOT

########################################
# Stage 4: Build WasmEdge
########################################
FROM alpine-static AS builder

ARG TARGETPLATFORM
ARG ALPINE_VERSION

RUN apk add git llvm-dev

RUN xx-apk add \
    g++ \
    llvm-dev llvm-static \
    lld lld-dev \
    zlib-dev zlib-static

RUN sed -i 's|/usr/lib/llvm|${CMAKE_SYSROOT}usr/lib/llvm|' $(xx-info sysroot)usr/lib/cmake/llvm*/LLVMConfig.cmake

RUN find $(xx-info sysroot)/usr/lib/llvm/lib/ -name 'liblld*.a' -exec cp {} $(xx-info sysroot)/usr/lib/llvm*/lib/ \; || true

RUN ! xx-info is-cross || cp -f /usr/lib/llvm*/bin/llvm-config $(xx-info sysroot)usr/lib/llvm*/bin/llvm-config

RUN --mount=type=bind,target=/src,source=. \
    cmake -S /src -B /build -G Ninja \
        -DCMAKE_BUILD_TYPE=MinSizeRel \
        -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
        -DCMAKE_INSTALL_PREFIX="/install" \
        -DCMAKE_TOOLCHAIN_FILE="$(xx-toolchain)" \
        -DWASMEDGE_BUILD_PACKAGE="TGZ" \
        -DWASMEDGE_USE_LLVM=ON \
        -DWASMEDGE_BUILD_STATIC_LIB=ON \
        -DWASMEDGE_BUILD_TESTS=OFF \
        -DWASMEDGE_BUILD_SHARED_LIB=OFF \
        -DWASMEDGE_BUILD_TOOLS=OFF \
        -DWASMEDGE_BUILD_PLUGINS=OFF \
        -DWASMEDGE_BUILD_EXAMPLE=OFF \
        -DWASMEDGE_LINK_LLVM_STATIC=ON \
        -DWASMEDGE_LINK_TOOLS_STATIC=ON \
        -DWASMEDGE_DISABLE_LIBTINFO=ON

RUN --mount=type=bind,target=/src,source=. \
    cmake --build /build -- install package

RUN --mount=type=bind,target=/src,source=. <<EOT
    set -ex
    WASMEDGE_VERSION="$(cd /src && git describe --match '[0-9].[0-9]*' --tag)"
    ARCH="$(xx-info march)"
    ARCHIVE_TAG=${WASMEDGE_VERSION%%-*}-alpine${ALPINE_VERSION}_${ARCH}
    mv /build/WasmEdge-*-Linux.tar.gz /build/WasmEdge-${ARCHIVE_TAG}_static.tar.gz
EOT

########################################
# Stage 5: Final packaged output
########################################
FROM scratch AS tar
COPY --from=builder /build/WasmEdge-*.tar.gz /
