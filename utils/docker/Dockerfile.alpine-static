# syntax=docker/dockerfile:1.5-labs

ARG ALPINE_VERSION=3.22

########################################
# Stage 1: Cross-compilation tool
########################################
FROM --platform=$BUILDPLATFORM tonistiigi/xx:1.2.1 AS xx

########################################
# Stage 2: Build LLVM Tools (but not Clang) from Source
# This provides static lld, llvm-tblgen, and other utilities.
########################################
FROM alpine:${ALPINE_VERSION} AS llvm-builder

RUN apk add --no-cache bash cmake ninja clang llvm-dev git

WORKDIR /llvm-build
RUN git clone --depth=1 --branch=release/18.x https://github.com/llvm/llvm-project.git

WORKDIR /llvm-build/llvm-project

# IMPORTANT: We only enable the 'llvm' and 'lld' projects.
# This builds the tools we need without building a custom clang compiler.
RUN cmake -B build \
    -G Ninja \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/llvm-install \
    -DLLVM_ENABLE_PROJECTS="llvm;lld"

RUN cmake --build build --target install

########################################
# Stage 3: WasmEdge Builder
# This combines the stable system clang with our custom-built LLVM tools.
########################################
FROM alpine:${ALPINE_VERSION} AS builder

COPY --from=xx / /
SHELL ["bash", "-c"]

# Install HOST build dependencies, including the stable system clang.
RUN apk add --no-cache bash cmake samurai clang g++ git llvm-dev

# Install TARGET dependencies into the sysroot.
# We do NOT install g++ into the sysroot to avoid stdlib conflicts.
RUN xx-apk add --no-cache \
    musl-dev \
    libc-dev \
    clang \
    libc++-static \
    llvm-libunwind-static \
    zlib-static \
    zlib-dev

# Copy ALL tools, libraries, and cmake files from our custom LLVM build.
# This provides llvm-tblgen, lld, llvm-ar, etc., without overwriting the system's clang.
COPY --from=llvm-builder /llvm-install/ /usr/

# Replicate the setup from the original working Dockerfile for WasmEdge's build system.
RUN sed -i 's|/usr/lib/llvm|${CMAKE_SYSROOT}usr/lib/llvm|' $(xx-info sysroot)usr/lib/cmake/llvm*/LLVMConfig.cmake
RUN cp $(xx-info sysroot)usr/lib/liblld*.a $(xx-info sysroot)usr/lib/llvm*/lib/
RUN ! xx-info is-cross || cp -f /usr/bin/llvm-config $(xx-info sysroot)usr/bin/llvm-config

# Create a simple, robust toolchain file based on the original.
RUN cat <<'EOT' > /usr/bin/xx-toolchain && chmod a+x /usr/bin/xx-toolchain
#!/bin/bash
set -e
mkdir -p /etc/xx-toolchains/
TARGET_TRIPLE=$(xx-clang --print-target-triple)
TOOLCHAIN_FILE="/etc/xx-toolchains/${TARGET_TRIPLE}.cmake"

if [ ! -f "$TOOLCHAIN_FILE" ]; then
    cat <<EOF > "$TOOLCHAIN_FILE"
set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR "$(xx-info arch)")
set(CMAKE_SYSROOT "$(xx-info sysroot)")

set(CMAKE_C_COMPILER "xx-clang")
set(CMAKE_CXX_COMPILER "xx-clang++")
set(CMAKE_AR "xx-llvm-ar")
set(CMAKE_RANLIB "xx-llvm-ranlib")

set(CMAKE_C_COMPILER_TARGET "${TARGET_TRIPLE}")
set(CMAKE_CXX_COMPILER_TARGET "${TARGET_TRIPLE}")

set(CMAKE_CXX_FLAGS "-stdlib=libc++" CACHE STRING "")
set(CMAKE_EXE_LINKER_FLAGS "-stdlib=libc++ -fuse-ld=lld -static" CACHE STRING "")
EOF
fi
echo "$TOOLCHAIN_FILE"
EOT

# Configure WasmEdge
RUN --mount=type=bind,target=/src,source=. \
    cmake -S /src -B /build -G Ninja \
        -DCMAKE_BUILD_TYPE=MinSizeRel \
        -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
        -DCMAKE_INSTALL_PREFIX="/install" \
        -DCMAKE_TOOLCHAIN_FILE="$(xx-toolchain)" \
        -DWASMEDGE_BUILD_PACKAGE="TGZ" \
        -DWASMEDGE_USE_LLVM=ON \
        -DWASMEDGE_BUILD_STATIC_LIB=ON \
        -DWASMEDGE_BUILD_TESTS=OFF \
        -DWASMEDGE_BUILD_SHARED_LIB=OFF \
        -DWASMEDGE_BUILD_TOOLS=OFF \
        -DWASMEDGE_BUILD_PLUGINS=OFF \
        -DWASMEDGE_BUILD_EXAMPLE=OFF \
        -DWASMEDGE_LINK_LLVM_STATIC=ON \
        -DWASMEDGE_LINK_TOOLS_STATIC=ON \
        -DWASMEDGE_DISABLE_LIBTINFO=ON

# Build WasmEdge
RUN --mount=type=bind,target=/src,source=. \
    cmake --build /build -- install package

# Rename the final package archive
RUN --mount=type=bind,target=/src,source=. <<EOT
    set -ex
    WASMEDGE_VERSION="$(cd /src && git describe --match '[0-9].[0-9]*' --tag)"
    ARCHIVE_TAG=${WASMEDGE_VERSION%%-*}-alpine${ALPINE_VERSION}_$(xx-info march)
    mv /build/WasmEdge-*-Linux.tar.gz /build/WasmEdge-${ARCHIVE_TAG}_static.tar.gz
EOT

########################################
# Stage 4 & 5: Final packaging stages
########################################
FROM scratch AS install
COPY --from=builder /install /

FROM scratch AS tar
COPY --from=builder /build/WasmEdge-*.tar.gz /
