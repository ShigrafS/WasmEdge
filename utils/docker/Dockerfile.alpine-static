# ================================
# Stage 1: Build LLD with LLVM
# ================================
FROM --platform=$BUILDPLATFORM alpine:3.19 AS lld-builder

# Install dependencies
RUN apk add --no-cache \
    build-base \
    cmake \
    ninja \
    git \
    python3 \
    zlib-dev \
    libxml2-dev \
    ncurses-dev \
    bash

# Clone LLVM monorepo (shallow)
WORKDIR /llvm-project
RUN git clone --depth=1 --branch llvmorg-17.0.6 https://github.com/llvm/llvm-project.git .

# Configure LLVM to build only LLD and minimal targets
RUN cmake -B build \
    -G Ninja \
    -DLLVM_ENABLE_PROJECTS="lld" \
    -DLLVM_TARGETS_TO_BUILD="X86;WebAssembly" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/lld-install \
    -DCMAKE_INSTALL_LIBDIR=lib \
    -DLLVM_ENABLE_ASSERTIONS=OFF \
    -DLLVM_BUILD_TOOLS=OFF \
    -DLLVM_INCLUDE_TESTS=OFF \
    -DLLVM_INCLUDE_EXAMPLES=OFF \
    -DLLVM_INCLUDE_BENCHMARKS=OFF \
    llvm

# Build & install
RUN cmake --build build --target install


# ================================
# Stage 2: Build WasmEdge with LLD
# ================================
FROM --platform=$BUILDPLATFORM tonistiigi/xx:1.2.1 AS xx

FROM --platform=$BUILDPLATFORM alpine:3.19 AS wasmedge-builder

# Arguments for cross-compilation
ARG TARGETPLATFORM
ARG BUILDPLATFORM

# Copy xx cross-compilation tools
COPY --from=xx / /

# Install build deps
RUN apk add --no-cache \
    build-base \
    cmake \
    ninja \
    git \
    python3 \
    zlib-dev \
    libxml2-dev \
    ncurses-dev \
    bash

# Copy LLD from first stage
COPY --from=lld-builder /lld-install/lib/liblld*.a /usr/lib/llvm/lib/
COPY --from=lld-builder /lld-install/lib/libLLVM*.a /usr/lib/llvm/lib/
COPY --from=lld-builder /lld-install/bin/lld* /usr/bin/

# Prepare workspace
WORKDIR /build

# Clone WasmEdge (specific commit for 0.14.1)
RUN git clone --depth=1 --branch=0.14.1 https://github.com/WasmEdge/WasmEdge.git

WORKDIR /build/WasmEdge

# Use xx-cmake to handle toolchain automatically
RUN xx-cmake -B build \
    -G Ninja \
    -DWASMEDGE_BUILD_TESTS=OFF \
    -DWASMEDGE_LINK_LLVM_STATIC=ON \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr/local

# Build & install WasmEdge
RUN cmake --build build --target install


# ================================
# Stage 3: Final minimal image
# ================================
FROM alpine:3.19

# Runtime dependencies for WasmEdge
RUN apk add --no-cache \
    libstdc++ \
    bash

# Copy installed WasmEdge from builder
COPY --from=wasmedge-builder /usr/local /usr/local

ENTRYPOINT ["/usr/local/bin/wasmedge"]
