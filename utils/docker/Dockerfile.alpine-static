# syntax=docker/dockerfile:1.5-labs

ARG ALPINE_VERSION=3.22

########################################
# Stage 1: xx (cross-compilation tool)
########################################
FROM --platform=$BUILDPLATFORM tonistiigi/xx:1.2.1 AS xx

########################################
# Stage 2: Build LLD from LLVM source
########################################
FROM alpine:${ALPINE_VERSION} AS lld-builder

RUN apk add --no-cache \
    bash \
    cmake \
    ninja \
    clang \
    llvm-dev \
    llvm-static \
    lld-dev \
    git \
    musl-dev \
    zlib-dev \
    zlib-static \
    libc-dev \
    libffi-dev \
    curl \
    tar \
    xz

WORKDIR /lld-build

RUN git clone --depth=1 --branch=release/18.x https://github.com/llvm/llvm-project.git

WORKDIR /lld-build/llvm-project

RUN cmake -B build \
    -G Ninja \
    -DLLVM_ENABLE_PROJECTS="lld" \
    -DLLVM_TARGETS_TO_BUILD="X86;WebAssembly" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/lld-install \
    -DCMAKE_INSTALL_LIBDIR=lib \
    -DLLVM_ENABLE_ASSERTIONS=OFF \
    llvm

RUN cmake --build build --target install

########################################
# Stage 3: Alpine Static Image with LLD
########################################
FROM --platform=$BUILDPLATFORM alpine:${ALPINE_VERSION} AS alpine-static

LABEL maintainer="you@example.com"
LABEL description="Alpine ${ALPINE_VERSION} with LLD and static toolchain"

COPY --from=xx / /

# Install bash so we can use SHELL
RUN apk add --no-cache bash

# Set bash for all future RUN commands
SHELL ["bash", "-c"]

# Install static toolchain and build dependencies
RUN apk add --no-cache \
    cmake \
    samurai \
    g++ \
    clang \
    llvm-static \
    lld-dev \
    zlib-static \
    zlib-dev \
    git \
    musl-dev \
    libc-dev \
    libffi-dev

# Ensure destination lib dir exists
RUN mkdir -p /usr/lib/llvm/lib

# Copy LLD static libraries and binaries from builder
COPY --from=lld-builder /lld-install/lib/liblld*.a /usr/lib/llvm/lib/
COPY --from=lld-builder /lld-install/bin/lld* /usr/bin/

# Patch LLVMConfig for proper sysroot awareness
RUN sed -i 's|/usr/lib/llvm|${CMAKE_SYSROOT}usr/lib/llvm|' $(xx-info sysroot)usr/lib/cmake/llvm*/LLVMConfig.cmake || true

# Add xx-toolchain shortcut script
RUN cat <<'EOT' > /usr/bin/xx-toolchain && chmod +x /usr/bin/xx-toolchain
#!/bin/bash
mkdir -p /etc/xx-toolchains/
TOOLCHAIN_FILE="/etc/xx-toolchains/$(xx-info triple).cmake"
if [ ! -f "$TOOLCHAIN_FILE" ]; then
  xx-clang --cmake-toolchain "$TOOLCHAIN_FILE"
fi
echo "$TOOLCHAIN_FILE"
EOT

# Optional: Working directory if you plan to mount source code
WORKDIR /src

# Optional: Default command
CMD ["/bin/bash"]
