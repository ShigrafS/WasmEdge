# syntax=docker/dockerfile:1.5-labs

ARG ALPINE_VERSION=3.22

########################################
# Stage 1: xx (cross-compilation tool)
########################################
FROM --platform=$BUILDPLATFORM tonistiigi/xx:1.2.1 AS xx

########################################
# Stage 2: Build LLD from LLVM source
########################################
FROM alpine:${ALPINE_VERSION} AS lld-builder

RUN apk add --no-cache \
    bash \
    cmake \
    ninja \
    clang \
    llvm-dev \
    llvm-static \
    lld-dev \
    git \
    musl-dev \
    zlib-dev \
    zlib-static \
    libc-dev \
    libffi-dev \
    curl \
    tar \
    xz \
    zstd-dev \
    zstd-static

WORKDIR /lld-build

RUN git clone --depth=1 --branch=release/18.x https://github.com/llvm/llvm-project.git

WORKDIR /lld-build/llvm-project

RUN cmake -B build \
    -G Ninja \
    -DLLVM_ENABLE_PROJECTS="llvm;lld" \
    -DLLVM_TARGETS_TO_BUILD="X86;WebAssembly" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/lld-install \
    -DCMAKE_INSTALL_LIBDIR=lib \
    -DLLVM_ENABLE_ASSERTIONS=OFF \
    llvm

RUN cmake --build build --target install

########################################
# Stage 3: Alpine Static Image with LLD
########################################
FROM --platform=$BUILDPLATFORM alpine:${ALPINE_VERSION} AS alpine-static

LABEL maintainer="you@example.com"
LABEL description="Alpine ${ALPINE_VERSION} with LLD and static toolchain"

COPY --from=xx /usr/bin/xx* /usr/bin/

# Install bash so we can use SHELL
RUN apk add --no-cache bash

# Set bash for all future RUN commands
SHELL ["bash", "-c"]

# Install static toolchain and build dependencies
RUN apk add --no-cache \
    cmake \
    samurai \
    g++ \
    clang \
    llvm-static \
    lld-dev \
    zlib-static \
    zlib-dev \
    git \
    musl-dev \
    libc-dev \
    libffi-dev

# Ensure necessary directories exist
RUN mkdir -p /usr/lib/llvm/lib /usr/lib/cmake/llvm $(xx-info sysroot)/usr/bin

# Copy LLVM static libraries to both expected locations
COPY --from=lld-builder /lld-install/lib/libLLVM*.a /usr/lib/
COPY --from=lld-builder /lld-install/lib/libLLVM*.a /usr/lib/llvm/lib/

# Copy LLD static libraries to both expected locations
COPY --from=lld-builder /lld-install/lib/liblld*.a /usr/lib/
COPY --from=lld-builder /lld-install/lib/liblld*.a /usr/lib/llvm/lib/

# LLVM CMake config directory
COPY --from=lld-builder /lld-install/lib/cmake/llvm /usr/lib/cmake/llvm
# LLVM tools (needed for CMake and config)
COPY --from=lld-builder /lld-install/bin/llvm-config /usr/bin/
# LLD tools
COPY --from=lld-builder /lld-install/bin/lld* /usr/bin/

# Copy llvm-tblgen (needed by LLVM CMake config)
COPY --from=lld-builder /lld-install/bin/llvm-tblgen /usr/bin/
RUN ! xx-info is-cross || cp -f /usr/bin/llvm-tblgen $(xx-info sysroot)/usr/bin/llvm-tblgen

# Copy llvm-config into sysroot if cross-compiling
RUN ! xx-info is-cross || cp -f /usr/bin/llvm-config $(xx-info sysroot)/usr/bin/llvm-config

# Copy LTO shared lib to satisfy LLVMConfig
COPY --from=lld-builder /lld-install/lib/libLTO.so* /usr/lib/
RUN ! xx-info is-cross || cp -f /usr/lib/libLTO.so* $(xx-info sysroot)/usr/lib/

# Patch LLVMConfig for proper sysroot awareness
RUN sed -i 's|/usr/lib/llvm|${CMAKE_SYSROOT}usr/lib/llvm|' $(xx-info sysroot)usr/lib/cmake/llvm*/LLVMConfig.cmake || true

# Add xx-toolchain shortcut script (manual generation)
RUN cat <<'EOT' > /usr/bin/xx-toolchain && chmod +x /usr/bin/xx-toolchain
#!/bin/bash
mkdir -p /etc/xx-toolchains/
TOOLCHAIN_FILE="/etc/xx-toolchains/$(xx-clang --print-target-triple).cmake"
[ -f "$TOOLCHAIN_FILE" ] || cat <<EOF > "$TOOLCHAIN_FILE"
set(CMAKE_CROSSCOMPILING ON)
set(CMAKE_SYSROOT "$(xx-info sysroot)")
set(CMAKE_SYSTEM_NAME "Linux")
set(CMAKE_SYSTEM_VERSION 1)
set(CMAKE_SYSTEM_PROCESSOR "$(xx-info march)")
set(CMAKE_C_COMPILER "$(which clang)")
set(CMAKE_CXX_COMPILER "$(which clang++)")
set(CMAKE_ASM_COMPILER "$(which clang)")
set(CMAKE_AR "$(which ar)")
set(CMAKE_RANLIB "$(which ranlib)")
set(PKG_CONFIG_EXECUTABLE "$(xx-clang --print-prog-name=pkg-config)")
set(CMAKE_C_COMPILER_TARGET "$(xx-clang --print-target-triple)")
set(CMAKE_CXX_COMPILER_TARGET "$(xx-clang --print-target-triple)")
set(CMAKE_ASM_COMPILER_TARGET "$(xx-clang --print-target-triple)")
EOF
echo "$TOOLCHAIN_FILE"
EOT

########################################
# Stage 4: wasmedge-build
########################################

FROM alpine-static AS wasmedge-build
SHELL ["bash", "-c"]

ARG TARGETPLATFORM
ARG ALPINE_VERSION

WORKDIR /src

RUN apk add --no-cache \
    curl \
    tar \
    git \
    ninja \
    bash \
    cmake \
    zstd-dev \
    zstd-static

# Copy all necessary xx binaries and toolchains
COPY --from=alpine-static /usr/bin/xx* /usr/bin/

RUN --mount=type=bind,target=/src,source=. \
    cmake -S /src -B /build -G Ninja \
        -DCMAKE_BUILD_TYPE=MinSizeRel \
        -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
        -DCMAKE_INSTALL_PREFIX="/install" \
        -DCMAKE_TOOLCHAIN_FILE="$(xx-toolchain)" \
        -DCMAKE_PREFIX_PATH="$(xx-info sysroot)/usr/lib/cmake/llvm" \
        -DWASMEDGE_BUILD_PACKAGE="TGZ" \
        -DWASMEDGE_USE_LLVM=ON \
        -DWASMEDGE_BUILD_STATIC_LIB=ON \
        -DWASMEDGE_BUILD_TESTS=OFF \
        -DWASMEDGE_BUILD_SHARED_LIB=OFF \
        -DWASMEDGE_BUILD_TOOLS=OFF \
        -DWASMEDGE_BUILD_PLUGINS=OFF \
        -DWASMEDGE_BUILD_EXAMPLE=OFF \
        -DWASMEDGE_LINK_LLVM_STATIC=ON \
        -DWASMEDGE_LINK_TOOLS_STATIC=ON \
        -DWASMEDGE_DISABLE_LIBTINFO=ON

RUN --mount=type=bind,target=/src,source=. \
    cmake --build /build -- install package

# Optional: Working directory if you plan to mount source code
WORKDIR /src

# Optional: Default command
CMD ["/bin/bash"]
