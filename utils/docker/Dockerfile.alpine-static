# syntax=docker/dockerfile:1.5-labs

ARG ALPINE_VERSION=3.22
ARG XX_VERSION=1.2.1

#### --- Stage 1: Build static LLD from source --- ####
FROM alpine:${ALPINE_VERSION} AS lld-builder

RUN apk add --no-cache \
    bash cmake ninja clang llvm-dev llvm-static lld-dev \
    git musl-dev zlib-dev zlib-static libc-dev libffi-dev

WORKDIR /lld-build
RUN git clone --depth=1 https://github.com/llvm/llvm-project.git

WORKDIR /lld-build/llvm-project/build
ENV CC=clang
ENV CXX=clang++
RUN cmake -G Ninja ../llvm \
  -DLLVM_ENABLE_PROJECTS="lld" \
  -DCMAKE_BUILD_TYPE=Release \
  -DLLVM_ENABLE_RTTI=ON \
  -DLLVM_ENABLE_EH=ON \
  -DLLVM_ENABLE_LLD=ON \
  -DLLVM_ENABLE_LTO=OFF \
  -DLLVM_TARGETS_TO_BUILD="X86;AArch64;ARM" \
  -DLLVM_BUILD_LLVM_DYLIB=OFF \
  -DLLVM_LINK_LLVM_DYLIB=OFF \
  -DLLVM_INCLUDE_TOOLS=ON \
  -DLLVM_BUILD_STATIC=ON \
  -DLLVM_BUILD_SHARED_LIBS=OFF \
  -DLLVM_ENABLE_THREADS=OFF \
  -DLLVM_ENABLE_ZLIB=ON \
  -DLLVM_INCLUDE_TESTS=OFF \
  -DLLVM_INCLUDE_UTILS=OFF \
  -DLLVM_INCLUDE_EXAMPLES=OFF \
  -DLLVM_INCLUDE_DOCS=OFF \
  -DZLIB_LIBRARY=/lib/libz.a \
  -DZLIB_INCLUDE_DIR=/usr/include

RUN ninja install-lld

RUN mkdir -p /lld-install/lib /lld-install/bin && \
    cp lib/liblld*.a /lld-install/lib/ && \
    cp bin/lld* /lld-install/bin/

#### --- Stage 2: Prepare xx and base image --- ####
FROM --platform=$BUILDPLATFORM tonistiigi/xx:${XX_VERSION} AS xx
FROM --platform=$BUILDPLATFORM alpine:${ALPINE_VERSION} AS base
COPY --from=xx / /
RUN apk add --no-cache bash cmake ninja g++ clang

SHELL [ "bash", "-c" ]
RUN cat <<'EOT' > /usr/bin/xx-toolchain && chmod a+x /usr/bin/xx-toolchain
#!/bin/bash
mkdir -p /etc/xx-toolchains/
TOOLCHAIN_FILE="/etc/xx-toolchains/${TARGETPLATFORM}.cmake"
cat <<EOF > "$TOOLCHAIN_FILE"
set(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR $(xx-clang --print-target-triple | cut -d- -f1))
set(CMAKE_C_COMPILER clang)
set(CMAKE_CXX_COMPILER clang++)
set(CMAKE_FIND_ROOT_PATH $(xx-info sysroot))
set(CMAKE_SYSROOT $(xx-info sysroot))
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
EOF
echo "$TOOLCHAIN_FILE"
EOT

#### --- Stage 3: Build WasmEdge statically with LLD --- ####
FROM base AS build
ARG TARGETPLATFORM

# Add static LLD from previous stage
COPY --from=lld-builder /lld-install/lib/liblld*.a /usr/lib/llvm/lib/
COPY --from=lld-builder /lld-install/bin/lld* /usr/bin/
ENV PATH="/usr/bin:$PATH"

RUN apk add --no-cache git llvm-static zlib-static zlib-dev

# Fix LLVMConfig for sysroot
RUN sed -i 's|/usr/lib/llvm|${CMAKE_SYSROOT}usr/lib/llvm|' $(xx-info sysroot)usr/lib/cmake/llvm*/LLVMConfig.cmake
RUN ! xx-info is-cross || cp -f /usr/lib/llvm*/bin/llvm-config $(xx-info sysroot)usr/lib/llvm*/bin/llvm-config

# Build WasmEdge
WORKDIR /work
COPY . /src
RUN --mount=type=bind,target=/src,source=. \
    cmake -S /src -B /build -G Ninja \
        -DCMAKE_BUILD_TYPE=MinSizeRel \
        -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
        -DCMAKE_INSTALL_PREFIX="/install" \
        -DCMAKE_TOOLCHAIN_FILE="$(xx-toolchain)" \
        -DWASMEDGE_BUILD_PACKAGE="TGZ" \
        -DWASMEDGE_USE_LLVM=ON \
        -DWASMEDGE_BUILD_STATIC_LIB=ON \
        -DWASMEDGE_BUILD_SHARED_LIB=OFF \
        -DWASMEDGE_BUILD_TESTS=OFF \
        -DWASMEDGE_BUILD_TOOLS=OFF \
        -DWASMEDGE_BUILD_PLUGINS=OFF \
        -DWASMEDGE_BUILD_EXAMPLE=OFF \
        -DWASMEDGE_LINK_LLVM_STATIC=ON \
        -DWASMEDGE_LINK_TOOLS_STATIC=ON \
        -DWASMEDGE_DISABLE_LIBTINFO=ON \
        -DCMAKE_LINKER=/usr/bin/lld \
        -DLLVM_USE_LINKER=lld

RUN cmake --build /build -- install package

#### --- Stage 4: Output image (fully static) --- ####
FROM scratch AS final
COPY --from=build /install /install
COPY --from=build /build/WasmEdge-*.tar.gz /WasmEdge-static.tar.gz
